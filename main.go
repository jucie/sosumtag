// Given a StackOverflow Developer Story, this program shows
// the total amount of time the developer has in each tag.
// use:
//       sosumtag <story.html

package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strconv"
	"strings"
)

// xtractMonths returns the quantity of months described in string s.
// s should be in the form "n years" or "n months"
func xtractMonths(s string) int {
	v := strings.Split(s, " ")
	qt, err := strconv.Atoi(v[0])
	if err != nil {
		panic(err)
	}
	if v[1] == "year" || v[1] == "years" {
		return qt * 12
	}
	return qt
}

// xtractTime returns the total quantity of months specified in line.
// line is the HTML source line generated by the SO system.
func xtractTime(line string) int {
	pos := strings.Index(line, "(")
	if pos < 0 {
		panic("couldn't find \"(\"")
	}
	line = line[pos+1:]
	pos = strings.Index(line, ")")
	if pos < 0 {
		panic("couldn't find \")\"")
	}
	line = line[:pos]
	sum := 0
	v := strings.Split(line, ", ")
	for _, s := range v {
		sum += xtractMonths(s)
	}
	return sum
}

// xtractTag finds the tag inside line and returns it.
// line is the HTML source line generated by the SO system.
func xtractTag(line string) string {
	pos := strings.Index(line, ">")
	if pos < 0 {
		panic("couldn't find \">\"")
	}
	line = line[pos+1:]
	pos = strings.Index(line, "<")
	if pos < 0 {
		panic("couldn't find \"<\"")
	}
	return line[:pos]
}

// toString converts a quantity of months to a
// string representation in the form "X years and Y months".
func toString(i int) string {
	years := i / 12
	months := i % 12
	var s string
	if years > 0 {
		if years == 1 {
			s = "1 year"
		} else {
			s = strconv.Itoa(years) + " years"
		}
	}
	if months > 0 {
		if s != "" {
			s = s + " and "
		}
		if months == 1 {
			s = s + "1 month"
		} else {
			s = s + strconv.Itoa(months) + " months"
		}
	}
	return s
}

// entry point
func main() {
	sc := bufio.NewScanner(os.Stdin)
	m := map[string]int{}
	months := 0
	for sc.Scan() {
		line := sc.Text()
		if strings.Index(line, "<span class=\"g-col fl-none fc-light\">") >= 0 {
			months = xtractTime(line)
		}
		if strings.Index(line, "<span class=\"post-tag\">") >= 0 {
			tag := xtractTag(line)
			m[tag] += months
		}
	}

	keys := []string{}
	for key := range m {
		keys = append(keys, key)
	}
	sort.Strings(keys)
	for _, key := range keys {
		qt := m[key]
		if qt > 0 {
			fmt.Printf("%-25s\t%s\n", key, toString(qt))
		}
	}
}
